# 120-apache2.conf
#
# Start up apache.  This is a "simple" service, so chaperone will monitor Apache and restart
# it if necessary.  Note that apache2.conf refers to MYSQL_UNIX_PORT (set by 105-mysql.conf)
# to tell PHP where MySQL is running.
#
# In the case where no USER variable is specified, we run as the www-data user.

settings: {
  env_set: {
    HTTPD_SERVER_NAME: apache,
    PHPRC: "$(APPS_DIR)/etc/php-cli.ini",
    # Uncomment to enable SSL and generate snakeoil keys for the given domain
    #SSL_HOSTNAME: example.com,
  }  
}

apache2.service: {
  command: "/usr/sbin/apache2 -f $(APPS_DIR)/etc/apache2.conf -DFOREGROUND",
  enabled: $(CONFIG_MANAGER),
  restart: true,
  uid: "$(USER:-www-data)",
  env_set: {
    APACHE_LOCK_DIR: /tmp,
    APACHE_PID_FILE: /tmp/apache2.pid,
    APACHE_RUN_USER: www-data,
    APACHE_RUN_GROUP: www-data,
    APACHE_RUN_DIR: "$(VAR_DIR)/run",
    APACHE_LOG_DIR: "$(VAR_DIR)/log/apache2",
    APACHE_SITES_DIR: "$(APPS_DIR)/www",
  },
  env_unset: [ 'PHPRC' ],
  # If Apache2 does not require a database, you can leave this out.
  after: database,
}

# Use daily logging (the %d) so that log rotation isn't so important.  Logs
# will be created automatically for each day where they are requied.
# See 300-logrotate.conf if you want to enable log rotation as a periodic
# job.  Note that chaperone watches for logs which are rotated and will
# automatically open a new file if the old one is rotated.
#
# Write logs either as the USER= user, or as www-data.

apache2.logging: {
  enabled: $(CONFIG_MANAGER),
  selector: 'local1.*;*.!err',
  file: '$(VAR_DIR)/log/apache2/apache-%d.log',
  uid: "$(USER:-www-data)",
}

apache2err.logging: {
  enabled: $(CONFIG_MANAGER),
  selector: 'local1.err',
  stderr: true,
  file: '$(VAR_DIR)/log/apache2/error-%d.log',
  uid: "$(USER:-www-data)",
}
